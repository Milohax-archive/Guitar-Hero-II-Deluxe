#define BEAT_HIDE ((hide {! [CharacterTesting edit_beat_track]}))
#define NON_BEAT_HIDE ((hide [CharacterTesting edit_beat_track]))
(Character
   (description "Base class for Character objects. Contains Geometry, Outfit Loaders, and LOD + Sphere concepts.")
   (allowed_dirs Character)
   (superclasses RndDir)
   (types (dancer))
   (editor
      (lods
         (array
            (struct
               (screen_size float
                  (help "min screen size to use this lod, screen height fraction of unit sphere"))
               (group object
                  (class Group)
                  (help "group to show")))
            (alias "lod")))
      (shadow object
         (class Group)
         (obj_flags allow_null)
         (help "Group containing shadow geometry"))
      (self_shadow bool
         (help "Whether this character should be self-shadowed."))
      (sphere_base object
         (class Trans)
         (obj_flags no_null)
         (help "Base for bounding sphere, such as bone_pelvis.mesh"))
      (CharacterTesting
         (struct
            (driver
               object
               (class CharDriver)
               (refresh CharacterTesting)
               (help "The driver to animate"))
            (clip1
               object
               (class CharClip)
               (dir_prop clips)
               (list {$this test_clips})
               (refresh CharacterTesting)
               (help "Clip to play"))
            (clip2
               object
               NON_BEAT_HIDE
               (class CharClip)
               (dir_prop clips)
               (list {$this test_clips})
               (refresh CharacterTesting)
               (help "Clip to transition to, if any"))
            (clip2_realtime bool
               (help "Force clip2 to be played in real time"))
            (game_time bool
               NON_BEAT_HIDE
               (help "Animate based on game time or from the AnimBar")
               (refresh))
            (bpm float
               NON_BEAT_HIDE
               (help "bpm to play clips at"))
            (transition int
               NON_BEAT_HIDE
               (help "Which transition to use between clip1 and clip2"))
            (cycle_transition bool
               NON_BEAT_HIDE
               (help "Cycle through all the transitions"))
            (move_self bool
               NON_BEAT_HIDE
               (help "Move ourselves around when playing animations, if true, the anim bar won't work backwards")
               (no_test))
            (teleport_to
               object
               NON_BEAT_HIDE
               (class Waypoint)
               (dir {$this dir})
               (help "Teleport to this Waypoint"))
            (walk_path
               (array object
                  (class Waypoint)
                  (dir {$this dir}))
               NON_BEAT_HIDE
               (help "Walk path"))
            (walk script
               NON_BEAT_HIDE
               (script {$this test_walk})
               (help "Walks the path"))
            (dist_map symbol
               NON_BEAT_HIDE
               (list (none nodes raw))
               (help "Displays the transition distance map between clip1 and clip2, raw means the raw graph, no nodes"))
            (cam_follow bool
               (help "Camera follows the selected object or character"))
            (recenter script
               (script {$this set (CharacterTesting recenter) 1})
               (help "Recenters character at the origin"))
            (metronome bool
               (help "Click on every beat transition"))
            (edit_beat_track bool
               (help "enable beat track editing")
               (refresh CharacterTesting))
            (move_right script
               BEAT_HIDE
               (script {$this set (CharacterTesting move) 1})
               (help "Move right one"))
            (move_left script
               BEAT_HIDE
               (script {$this set (CharacterTesting move) -1})
               (help "Move left one"))
            (set_anchor script
               BEAT_HIDE
               (script {$this set (CharacterTesting set_anchor) 1})
               (help "Drop the anchor here"))
            (shift_right script
               BEAT_HIDE
               (script {$this set (CharacterTesting shift) 1})
               (help "Shift the whole beat track right"))
            (shift_left script
               BEAT_HIDE
               (script {$this set (CharacterTesting shift) -1})
               (help "Shift the whole beat track left"))
            (stretch_right script
               BEAT_HIDE
               (script {$this set (CharacterTesting stretch) 1})
               (help "Stretch beat track right from anchor"))
            (stretch_left script
               BEAT_HIDE
               (script {$this set (CharacterTesting stretch) -1})
               (help "Stretch beat track left from anchor"))
            (restore script script
               BEAT_HIDE
               (script {$this set (CharacterTesting restore) 1})
               (help "Restores the beat track for this clip"))
            (save_charclipset script
               BEAT_HIDE
               (script {$this set (CharacterTesting save) 1})
               (help "Saves the beat track changes to the CharClipSet, may take a few minutes to regenerate transitions"))
            (Previewing
               (indent
                  (show_shadow bool
                     (help "Show the shadow"))
                  (force_lod bool
                     (help "Forces the below lod, rather than picking it naturally"))
                  (lod int
                     (help "if show_lod is set, forces this lod"))
                  (show_bounding_sphere bool
                     (help "Graphically show the bounding sphere"))
                  (show_screen_size bool
                     (help "graphically displays the screensize and lod next to the character"))))
            (Tools
               (indent
                  (calc_bounding_sphere script
                     (script {$this calc_bounding_sphere})
                     (help "Recalculates the bounding sphere"))
                  (show_footsteps symbol
                     (list (none from_start from_end))
                     (help "Show footsteps for both clips, from_end aligns them from the end of the clip"))
                  (show_footextents bool
                     (help "Show foot extents on all waypoints"))
                  (validate_stops script
                     (script {validate_stops {{$this find main.drv} get clips_ptr}})
                     (help "Validate all the stops"))
                  (reload_clips script
                     (script {$this set (CharacterTesting reload_clips) 1})
                     (help "reloads selected driver clips"))
                  (restore_pose script
                     (script {$this set (CharacterTesting restore_pose) 1})
                     (help "Restores pose to that at load time"))
                  ('add defaults' script
                     (script {$this add_defaults} {milo update_objects})
                     (help "Adds default objects like main drivers and twist servos")))))
         (help "Test Character by animating it"))
      (debug_objs
         (array object
            (class Object))
         (help "List of graphically displayed objects"))))
(CharBlendBone
   (description "Sets a dest bone by a weighted average of a bunch of bones. Ideally this would be created from within Max at Export time and automatically exported, since changing the geometry will wreck this.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext blendbone)
   (editor
      (dest object
         (class Trans)
         (help "The bone to set"))
      (bones
         (array
            (struct
               (bone object
                  (class Trans)
                  (help "Bone to blend from")
                  (no_null))
               (weight float
                  (help "Weight to blend with")))))
      (pos bool
         (help "Blend position as well as orientation")))
   (types))
(CharClip
   (description "A clip of animation that you can play. We expect subclasses for stuff like compression.")
   (allowed_dirs)
   (editor
      (start_frame float
         (help "Start frame")
         (read_only TRUE)
         (refresh dirty))
      (end_frame float
         (help "End frame")
         (read_only TRUE)
         (refresh dirty))
      (length float
         (help "Length in frames")
         (read_only TRUE))
      (frames_per_sec float
         (help "Frames per second")
         (read_only TRUE)
         (refresh dirty))
      (samples_per_sec float
         (help "Samples per second")
         (read_only TRUE))
      (length_seconds float
         (help "Length in seconds")
         (read_only TRUE))
      (blend_width float
         (help "Blend-in time in beats")
         (refresh dirty))
      (flags int
         (help "Search flags, app specific")
         (refresh dirty))
      (default_blend int
         (list PLAY_BLEND_FLAGS)
         (help "Blend mode, if any, to use by default for this clip"))
      (default_loop int
         (list PLAY_LOOP_FLAGS)
         (help "Looping mode, if any, to use by default for this clip"))
      (beat_align int
         (list PLAY_TIME_FLAGS)
         (help "Time units/alignment, if any, for this clip"))
      (range float
         (help "Range in frames to randomly offset by when playing"))
      (relative bool
         (help "Make the clip all relative to its first frame"))
      (size int
         (read_only TRUE)
         (help "Size of the clip in bytes"))
      (enter_event string
         (help "Event script triggered at clip play time")
         (no_test))
      (exit_event string
         (help "Event script triggered at clip play stop time")
         (no_test))
      (events
         (array
            (struct
               (frame float
                  (help "Frame the event should trigger"))
               (event string
                  (help "Event script")))
            (header
               {sprint
                  [events {elem $milo.prop_path 1} frame]
                  ": "
                  [events {elem $milo.prop_path 1} event]}))
         (help "Events that get triggered during play"))
      (dirty bool
         (read_only TRUE)
         (help "Indicates transition graph needs updating")))
   (types)
   (superclasses))
(CharClipGroup
   (description "A related group of animations. Gives you the lru one. Usually no extension.")
   (allowed_dirs CharClipSet)
   (editor
      (clips
         (array object
            (class CharClip)
            (obj_flags no_null)
            (help "LRU list of clips belonging to this group"))))
   (types))
#define SAMPLESET
((struct
      (bones
         (array
            symbol
            (help "the full keyframed bones"))
         (read_only TRUE))
      (num_samples int
         (help "how many keyframes")
         (read_only TRUE))
      (preview
         (struct
            (sample int
               (help "which sample to preview below")
               (refresh full one))
            (pos_bone symbol
               (list
                  {$this
                     prop_handle
                     ({elem $milo.prop_path 0}
                        preview
                        list_pos)})
               (refresh full one))
            (pos VECTOR3
               (read_only TRUE)
               (help "position"))
            (quat_bone symbol
               (list
                  {$this
                     prop_handle
                     ({elem $milo.prop_path 0}
                        preview
                        list_quats)})
               (refresh full one))
            (quat QUAT
               (read_only TRUE)
               (help "Quaternion"))
            (euler VECTOR3
               (read_only TRUE)
               (help "Euler angles in degrees"))
            (rot_bone symbol
               (list
                  {$this
                     prop_handle
                     ({elem $milo.prop_path 0}
                        preview
                        list_rots)})
               (refresh full one))
            (angle float
               (read_only TRUE)
               (help "Angle in degrees"))
            (scale_bone symbol
               (list {$this
                     prop_handle
                     ({elem $milo.prop_path 0}
                        preview
                        list_scales)})
               (refresh full one))
            (scale VECTOR3
               (read_only TRUE)
               (help "scale"))))))
(CharClipSamples
   (description "This is the simple but inefficient format that just stores samples and interpolates. Data is grouped by time, not channel, for better storage, interpolation, etc.")
   (allowed_dirs CharClipSet)
   (superclasses CharClip)
   (editor
      (full SAMPLESET)
      (one SAMPLESET))
   (types))
(CharClipFilter
   (description "Callback object for CharClipSet, calls filter_clips on dir at load")
   (allowed_dirs)
   (ext ccf)
   (types))
(CharBone
   (description "A Character system bone, conveys degrees of freedom to animate")
   (allowed_dirs CharClipSet)
   (superclasses Trans)
   (editor
      (position bool
         (help "animate position or not"))
      (rotation int
         (list
            ("kRotNone"
               "kRotFull"
               "kRotX"
               "kRotY"
               "kRotZ"))
         (help "what axis or axes to animate"))
      (scale bool
         (help "animate scale or not")))
   (types))
(CharClipSet
   (description "A <a href='#CharClip'>CharClip</a> container.")
   (allowed_dirs)
   (superclasses ObjectDir)
   (editor
      (default_blend int
         (list PLAY_BLEND_FLAGS)
         (help "Blend mode to assign to new clips"))
      (default_loop int
         (list PLAY_LOOP_FLAGS)
         (help "Looping mode to assign to new clips"))
      (default_beat_align int
         (list PLAY_TIME_FLAGS)
         (help "Time units/alignment to assign to new clips"))
      (blend_width float
         (help "Default blend in time for new Clips"))
      (move_self bool
         (help "Can I move myself around by animating or not"))
      (recenter
         (struct
            (targets
               (array object
                  (class CharBone)
                  (obj_flags no_null))
               (help "bones to recenter, ie, bone_pelvis"))
            (average
               (array object
                  (class CharBone)
                  (obj_flags no_null))
               (help "bones to average to find the new center"))
            (slide bool
               (help "Slide the character over the course of the clip")))
         (help "Recenter target bones on the character by averaging other bones"))
      ('regenerate transitions' script
         (script {$this regenerate_transitions TRUE})
         (help "Regenerates the clip to clip transition graph. This may take several minutes."))
      (merge_character file
         (help "Merge in bones from a character")
         (refresh recenter)
         (post_sync
            {milo update_objects}))
      (analyze_dof script
         (help "See if you any quats can be turned into rotx, roty, etc")
         (script {$this analyze_dof})))
   (types))
(CharCollide
   (description "Feeds the bones when executed.")
   (allowed_dirs Character)
   (superclasses CharIKHand)
   (ext coll)
   (editor
      (radius float
         (help "Radius of the source")))
   (types))
(CharDriver
   (description "Class to Drive, Schedule and Blend CharClips. Basically a stack, new ones are pushed onto the bottom, start playing at some point, and then pop off the ones above it once they are fully blended in.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext drv)
   (editor
      (bones object
         (class CharServoBone)
         (help "Blend-in time in beats"))
      (clips file
         (help "Clip Set milo file to load up"))
      (realign bool
         (help "Realigns the clips to always be aligned with the beat in the measure"))
      (beat_scale float
         (help "Scale factor applied to incoming beat")
         (no_test)))
   (types))
(CharDriverMidi
   (description "Uses an event list made from a parser to player animation on self.")
   (allowed_dirs Character)
   (superclasses CharDriver)
   (ext dmidi)
   (editor
      (inactive_clip object
         (class CharClip)
         (dir_prop clips_ptr)
         (help "Name of animation clip to use when not active, can be empty")))
   (types))
(CharEyes
   (description "Moves a bunch of lookats around")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext eyes)
   (editor
      (eyes
         (array object
            (class CharLookAt))
         (help "Eyes to retarget"))
      (right_lid object
         (class Trans)
         (help "the right eyelid bone")))
   (types))
(CharForeTwist
   (description "Does all interpolation for the forearm. Assumes: <ul> <li>foretwist1 and forearm are under upperarm.</li> <li>foretwist2 is under foretwist1 and that hand is under forearm.</li> <li>on the left hand offset rotation is usually 90 on the left, and -90 on the right.</li> </ul> Feeds the bones when executed.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ftwist)
   (editor
      (hand object
         (class Trans)
         (help "The hand bone"))
      (twist2 object
         (class Trans)
         (help "The twist2 bone"))
      (offset float
         (help "Usually -90 for right hand, 90 for left hand")))
   (types))
(CharHair
   (description "Hair physics, deals with strands of hair")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext hair)
   (editor
      (stiffness float
         (range 0 1)
         (help "stiffness of each strand"))
      (torsion float
         (range 0 1)
         (help "rotational stiffness of each strand"))
      (inertia float
         (range 0 1)
         (help "Inertia of the hair, zero means none"))
      (gravity float
         (range 0 10)
         (help "Gravity of the hair, one is normal"))
      (weight float
         (range 0 1)
         (help "Gravity of the hair, one is normal"))
      (friction float
         (range 0 1)
         (help "Hair friction against each other"))
      (strands
         (array
            (struct
               (root object
                  (class Trans)
                  (help "The root Trans for the hair strand")
                  (refresh strands))
               (angle float
                  (help "Angle in degrees of starting flip"))
               (points
                  (array
                     (struct
                        (bone object
                           (class Trans)
                           (read_only TRUE)
                           (help "hair bone we set the transform of"))
                        (length float
                           (help "the length of this strand bone"))
                        (collision object
                           (class Trans)
                           (help "collision sphere"))
                        (collide_type int
                           (list
                              ("kCollidePlane"
                                 "kCollideSphere"
                                 "kCollideInsideSphere"
                                 "kCollideCylinder"))
                           (help "Type of collision"))
                        (distance float
                           (help "collision radius"))
                        (align_dist float
                           (help "if positive, is the distance the bone should start aligning itself with the collision primitive, so that once touching it, it will be totally flattened against it."))
                        (show_collide bool
                           (help "show the sphere")))
                     (fixed_size TRUE))))))
      (simulate bool
         (help "Simulate physics or not")
         (no_test)))
   (types))
(CharIKFoot
   (description "Remedial foot skate ik, not yet ready for prime time.")
   (allowed_dirs Character)
   (superclasses)
   (ext ikfoot)
   (editor
      (hand object
         (class Trans)
         (help "The ankle, must be child of knee"))
      (toe object
         (class Trans)
         (help "The toe"))
      (other object
         (class CharIKFoot)
         (help "the other foot ik")))
   (types))
(CharIKHand
   (description "Pins a hand bone to another RndTransformable, bending the elbow to make it reach. Optionally aligns orientations and stretches")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext ikhand)
   (editor
      (hand object
         (class Trans)
         (help "The hand to be moved, must be child of elbow"))
      (dest object
         (class Trans)
         (help "Where to move the hand to"))
      (orientation bool
         (help "Orient the hand to the dest"))
      (stretch bool
         (help "Stretch the hand to the dest"))
      (scalable bool
         (help "Recalculate bone length every frame, needed for bones which scale")))
   (types))
(CharIKMidi
   (description "Moves an RndTransformable (bone) to another RndTransformable (spot) over time, blending from where it was relative to the parent of the spot.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ikmidi)
   (editor
      (bone object
         (class Trans)
         (help "The bone to move"))
      (new_spot object
         (class Trans)
         (help "Spot to go to, zero indexed")
         (no_test)))
   (types))
(CharIKRod
   (description "<p>Rigs a bone between two other bones and sets the orientation from that.</p> <p>When you set up all the bone pointers, the rig xfm will be computed, an inverse from that to the dst bone will be computed, and everything will come from that. So the dst bone will maintain the exact same position in that pose. That makes it easy to author the bones.</p>")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ikrod)
   (editor
      (left_end object
         (class Trans)
         (help "Left end of the rod"))
      (right_end object
         (class Trans)
         (help "Right end of the rod"))
      (dest_pos float
         (help "Fraction of the way dest is from left (0) to right(1)"))
      (side_axis object
         (class Trans)
         (help "Take the z axis from this bone rather than from rod end delta"))
      (vertical bool
         (help "Force the dest to be vertically upright"))
      (dest object
         (class Trans)
         (help "The bone to set")))
   (types))
(CharLookAt
   (description "Makes one thing look at another thing.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext lookat)
   (editor
      (source object
         (class Trans)
         (help "The bone which will look"))
      (pivot object
         (class Trans)
         (help "The thing to pivot the source, often just the parent of the source"))
      (dest object
         (class Trans)
         (help "The thing to look at"))
      (half_time float
         (help "Seconds of lag when moving the source"))
      (min_yaw float
         (help "Degrees of min allowable yaw, looking left"))
      (max_yaw float
         (help "Degrees of max allowable yaw, looking right"))
      (min_pitch float
         (help "Degrees of min allowable pitch, looking down"))
      (max_pitch float
         (help "Degrees of max allowable pitch, looking up"))
      (min_weight_yaw float
         (help "Degrees of yaw to start auto-weight"))
      (max_weight_yaw float
         (help "Degrees of yaw to stop auto-weight"))
      (weight_yaw_speed float
         (help "Max speed in weight/sec that the auto-weight can change"))
      (show_range bool
         (help "Graphically show the extreme ranges of motion")
         (no_test)))
   (types))
(CharMirror
   (description "Duplicates or mirrors another character's motions, given the matching bone servo.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext mirr)
   (editor
      (servo object
         (class CharServoBone)
         (help "The servo to change"))
      (mirror_servo object
         (class CharServoBone)
         (help "The servo we want to mirror")))
   (types))
(CharPollable
   (description "Workhorse unit of the Character system, most Character things inherit from this.")
   (allowed_dirs)
   (superclasses Poll)
   (types))
(CharPosConstraint
   (description "Forces the targets to be within a world space bounding box relative to source.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext const)
   (editor
      (source object
         (class Trans)
         (help "Bone to be higher than"))
      (targets
         (array object
            (class Trans))
         (help "Bones to constrain"))
      (box BOX
         (help "Bounding box, make min > max to ignore that dimension")))
   (types))
(CharServoBone
   (description "Sets bone transforms and regulates Character center to a spot.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext servo)
   (editor
      (regulate object
         (class Waypoint)
         (help "Waypoint to regulate to")
         (no_test))
      (move_self bool
         (help "Move ourselves around when playing animations")
         (no_test)))
   (types))
(CharUpperTwist
   (description "<p>Does all interpolation for the upperarm, assuming upperArm, upperTwist1 and 2 are under clavicle. Rotation about x is evenly distributed from clavicle->twist1->twist2->upperarm</p> Feeds the bones when executed.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext utwist)
   (editor
      (upper_arm object
         (class Trans)
         (help "The upper arm bone"))
      (twist1 object
         (class Trans)
         (help "The upper arm twist1 bone"))
      (twist2 object
         (class Trans)
         (help "The upper arm twist2 bone")))
   (types))
(CharWalk
   (description "Given a set of turns, walks, and stops, makes a character walk along waypoints, finishing up with a certain facing. There must be looping transitions for the walks, and transitions from turns to walks. Transitions from walks to stops are not needed as you may have to stop on a dime anyway. Instead the beat track is used to align walks and stops, so both have to be beat aligned to 2 beats, and the right foot needs to fall on the even beats.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext walk)
   (editor)
   (types))
(CharWeightable
   (description "Base class for any object that can have weight set on it, or have a Weightable parent from which it gets that state.")
   (allowed_dirs)
   (editor
      (weight float
         (help "Weight to blend in by"))
      (weight_owner object
         (class CharWeightable)
         (help "object to get weight from")
         (no_test)))
   (types))
(CharWeightSetter
   (description "Sets its own weight by pushing flags through a driver to see what fraction of them it has.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext weight)
   (editor
      (driver object
         (class CharDriver)
         (help "The Driver to monitor"))
      (flags int
         (help "Which clip flags to look for")))
   (types))
(FaceFxLipSyncServo
   (description "Controls lip-sync animation.")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext faceservo)
   (editor
      (clips file
         (help "Animation Clip Set milo file to load up"))
      (facegraph file
         (help "Facegraph file"))
      (registers
         (array
            (struct
               (register string
                  (help "name of FaceFx register"))
               (trans object
                  (class Trans)
                  (help "RndTransformable to get register from"))
               (op int
                  (list FACE_FX_LIP_SYNC_OPS)
                  (help "what to get from map_trans"))))
         (help "Mappings from RndTransformables to FaceFx Registers")))
   (types))
(OutfitLoader
   (description "Loads new outfits into a character by merging, much like a milo file merge.")
   (allowed_dirs Character)
   (superclasses)
   (ext outfit)
   (editor
      (directory file
         (dir TRUE)
         (help "Directory to look in."))
      (categories
         (array
            (struct
               (name symbol
                  (read_only TRUE)
                  (help "Name of the category"))
               (selected_outfit symbol
                  (refresh categories)
                  (list
                     {$this prop_handle
                        (categories
                           {elem $milo.prop_path 1}
                           list_outfits)})
                  (help "Selected outfit"))
               (shown_outfit symbol
                  (read_only TRUE)
                  (help "Shown outfit"))
               (desired_outfit symbol
                  (read_only TRUE)
                  (help "Desired outfit"))
               (outfits
                  (array
                     (struct
                        (name symbol
                           (read_only TRUE)
                           (help "Name of the outfit"))
                        (variant string
                           (read_only TRUE)
                           (help "Selected variant by name"))))
                  (fixed_size TRUE)))
            (header [categories {elem $milo.prop_path 1} name]))
         (fixed_size TRUE)
         (help "All the outfit categories"))
      (reset script
         (script
            {$this reset}
            {$this start_load})
         (help "Resets state, needed if you change typedef"))
      (start_load script
         (script {$this start_load})
         (help "Load the current state"))
      (disable_all bool
         (help "Disables ALL outfitloaders, for debugging ONLY!")
         (no_test)))
   (types))
(Waypoint
   (description "A waypoint for character movement. Characters walk to these, start themselves out from these, etc.")
   (allowed_dirs ObjectDir)
   (superclasses Trans Draw)
   (ext way)
   (editor
      (flags int
         (help "Flags for this waypoint, should be a bitfield per app"))
      (radius float
         (help "Radius within we can stop from a walk, or be tethered to"))
      (y_radius float
         (help "If positive, makes this shape a box with radius the x axis X half width, and y_radius the Y axis half width"))
      (ang_radius float
         (help "Angular slop in degrees away from y axis"))
      (connections
         (array object (class Waypoint))
         (help "Waypoints we can walk to"))
      (show_graph bool
         (help "Display the waypoint graph connections")))
   (types))
(VenueVerify
   (description "Analyzes character clips in a venue")
   (allowed_dirs ObjectDir)
   (superclasses)
   (ext vv)
   (editor
      (character object
         (class Character)
         (help "Pointer to the character to move around")
         (no_test))
      (pick_character string
         (list ("" ""))
         (help "Changes the character to one of the listed ones")
         (no_test))
      (waypoint object
         (class Waypoint)
         (help "Waypoint to stand at")
         (no_test))
      (position symbol
         (list (front back left right))
         (help "Where in the waypoint to stand")
         (no_test))
      (clip object
         (class CharClip)
         (dir_prop clips)
         (list {$this list_clips})
         (help "Clip to test")
         (no_test))
      (demonstrate script
         (help "Run the animation")
         (script {$this demonstrate})
         (no_test))
      (collide script
         (help "Run the collision")
         (script
            {$this clear_report}
            {$this collide})
         (refresh pick_report)
         (no_test))
      (test_chars script
         (help "Test all the characters against all the waypoints in this venue")
         (script
            {$this clear_report}
            {$this test_chars})
         (refresh pick_report)
         (no_test))
      (test_waypoints script
            (help "Test the current character against all the waypoints in the venue")
         (script
            {$this clear_report}
            {$this test_waypoints})
         (refresh pick_report)
         (no_test))
      (test_clips script
         (help "Test all clips for the current character and waypoint")
         (script
            {$this clear_report}
            {$this test_clips})
         (refresh pick_report)
         (no_test))
      (pick_report string
         (list {$this list_report})
         (help "Pick a report entry to look at")
         (refresh waypoint position clip)
         (no_test))
      (world_lines bool
         (help "show red world lines")
         (no_test))
      (move_camera bool
         (help "move the camera when you pick a report")
         (no_test))
      (mode symbol
         (list (''))
         (help "mode to run in")
         (no_test)))
   (types))