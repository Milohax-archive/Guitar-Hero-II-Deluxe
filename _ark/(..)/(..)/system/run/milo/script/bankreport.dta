{func
   as_kb
   ($bytes)
   {do
      ($kb
         {int
            {/
               {'+' $bytes 1023}
               1024}})
      {if_else
         {> $bytes 1024}
         {sprint
            $kb
            " kB"}
         {sprint
            $bytes
            " bytes"}}}}
{set
   $brcfg
   {find $syscfg bankreport}}
{set
   $cats
   {elem
      {find $brcfg categories}
      1}}
{set
   $stats
   {array 0}}
{foreach
   $cat
   $cats
   {print
      {elem $cat 0}
      "\n---------------\n"}
   {set $largest 0}
   {set $next_lgst 0}
   {set
      $lgst_name
      ""}
   {foreach
      $pat
      {elem $cat 1}
      {milo_recurse_pattern
         $dir
         {elem $pat 0}
         {elem $pat 1}
         {set
            $size
            {synth get_sample_mem $dir kPlatformPS2}}
         {print
            {path_name $dir}
            ": "
            {as_kb $size}
            "\n"}
         {if_else
            {>= $size $largest}
            {do
               {set $next_lgst $largest}
               {set $largest $size}
               {set
                  $lgst_name
                  {path_name $dir}}}
            {if
               {>= $size $next_lgst}
               {set $next_lgst $size}}}}}
   {set
      $a
      {array 0}}
   {insert_elem
      $a
      0
      {elem $cat 0}}
   {insert_elem $a 1 $lgst_name}
   {insert_elem $a 2 $largest}
   {insert_elem
      $stats
      {size $stats}
      $a}
   {print
      "\nLargest is "
      $lgst_name
      " by "
      {as_kb
         {- $largest $next_lgst}}
      "\n\n"}}
{print
   "SUMMARY\n--------------------\n"}
{print
   "Total SPU memory: "
   {as_kb
      {'*' 2048 1024}}
   "\n"}
{print
   "Stream and FX Overhead: "
   {as_kb
      {synth spu_overhead}}
   "\n"}
{set
   $free
   {-
      {'*' 2048 1024}
      {synth spu_overhead}}}
{print
   "SPU memory available: "
   {as_kb $free}
   "\n"}
{print
   "\nConfiguration totals:\n\n"}
{foreach
   $cfg
   {elem
      {find $brcfg configurations}
      1}
   {print
      {elem $cfg 0}
      ": "}
   {set $tot 0}
   {foreach
      $cat
      {elem $cfg 1}
      {set
         $tot
         {'+'
            $tot
            {elem
               {find $stats $cat}
               2}}}}
   {set
      $free_mem
      {- $free $tot}}
   {print
      {as_kb $tot}
      " ("
      {as_kb $free_mem}
      " free)\n"}
   {if
      {< $free_mem 0}
      {notify
         "out of SPU memory in configuration: "
         {elem $cfg 0}}}}