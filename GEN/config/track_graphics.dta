; Rainbow toggle!
; This is a nice microcosm of the mess going on in synth.dta, where we have
; to if_else the items in the array instead of the array itself.
(slot_colors
   {if_else $egg5
      gold
   {if_else $roygb
      green
      red}}
   {if_else $egg5
      gold
   {if_else $roygb
      red
      orange}}
   {if_else $egg5
      gold
   {if_else $roygb
      yellow
      yellow}}
   {if_else $egg5
      gold
   {if_else $roygb
      blue
      green}}
   {if_else $egg5
      gold
   {if_else $roygb
      orange
      blue}})
(smasher
   (mats
      (normal gem_smasher)
      (pressed 'gem_smasher_%s')
      (ring 'now_ring_%s')))
(particles
   (smash
      (normal smash_normal.view)
      (star smash_star.view)
      (bonus smash_bonus.view))
   (combo1 smash_combo.view)
   (combo2 smash_combo_lightning.view)
   (combo2_angle 12)
   (burn
      (normal 0)
      (whammy 10)
      (bonus 20)))

; Same goes for the sustain tails, which the game calls "strings".
#define STRING_SET
((gems
   ({if_else $egg5
        gold
	 {if_else $roygb
        green
        red}}
     {if_else $egg5
        gold
     {if_else $roygb
        red
        orange}}
     {if_else $egg5
        gold
     {if_else $roygb
        yellow
        yellow}}
     {if_else $egg5
        gold
     {if_else $roygb
        blue
        green}}
     {if_else $egg5
        gold
     {if_else $roygb
        orange
        blue}})))

; Drums are always GRYBO.
#define DRUM_SET ((gems (kick4 snare_red tom_yellow tom_blue tom_orange)))
(gem
   (fps 30)
   (mat_formats
      (gem 'gem_%s')
      (tail 'tail_%s')
      (tail_glow 'tail_glow_%s')
      (star 'gem_starpower_%s')
      (dot 'dot_top_hopo2_%s'))
   (tail_glow_width 1.5)
   (tail_glow_tight_width 0.7)
   (sparkle_len 1.0)
   (parts
      ((gem
          (type kMeshGem))
       (glow
          (type kMeshGemGlow))
       (top
          (type kMeshTop))
       (miss
          (type kMeshGemMiss)
          (default kMeshGem))
       (hopo
          (type kMeshHopoTop)
          (default kMeshTop))
       (star
          (type kMeshStar)
          (default kMeshGem))
       (top_star
          (type kMeshStarTop)
          (default kMeshTop))))
   (sets
      (guitar STRING_SET)
      (bass STRING_SET)
      (drum DRUM_SET)
      (rhythm STRING_SET)))
(track_width 20)
(horizon_y 110)
(remove_y -15)
(track_speed
   ; In vanilla GH2, the game set a single track speed that gets multiplied
   ; by 1.4 for Hard and Expert, thus creating the "normal" track speed.
   ; In DX, we do this, but divide that value (or the value on its own) by
   ; the $speedmod value, which is set by a slider in ui/modifiers.dta.
   (kDifficultyEasy {/ $trackspd $speedmod})
   (kDifficultyMedium {/ $trackspd $speedmod})
   (kDifficultyHard {/ {'*' $trackspd 1.4} $speedmod})
   (kDifficultyExpert {/ {'*' $trackspd 1.4} $speedmod}))
(alpha_dist 40)
(horizon_tail_clip 7)
(nowbar_tail_clip 1.5)
(cam
   (near_plane 50)
   (far_plane 200)
   (z_start 0)
   (z_end 0.1))
(init_gems 25)
(init_tails 16)
(multiplayer
   (normal
      (track_offset 8.85 0 0)
      (track_scale 0.85 0.85 0.85))
   (dual_perspective
      (track_scale 0.76 0.76 0.76))
   (use_dual_perspective TRUE))